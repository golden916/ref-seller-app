version: '2'

services:

  bpp-protocol-webserver:
    build:
      context: seller-app-protocol/webserver
      dockerfile: dockerfile
    container_name: bpp-protocol-webserver
    depends_on:
      - rabbitmq
      - postgres
    environment:
      ENV: prod
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      BPP_PRIVATE_KEY: ${BPP_PRIVATE_KEY}
      BPP_PUBLIC_KEY: ${BPP_PUBLIC_KEY}
      BPP_UNIQUE_KEY_ID: ${BPP_UNIQUE_KEY_ID}
      BPP_ID: ${BPP_ID}
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      FLASK_SERVER: "True"
    expose:
      - 5555
    ports:
      - 5555:5555


  bpp-protocol-consumer:
    build:
      context: seller-app-protocol/webserver
      dockerfile: consumer_dockerfile
    container_name: bpp-protocol-consumer
    depends_on:
      - rabbitmq
      - postgres
    environment:
      ENV: prod
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      BPP_PRIVATE_KEY: ${BPP_PRIVATE_KEY}
      BPP_PUBLIC_KEY: ${BPP_PUBLIC_KEY}
      BPP_UNIQUE_KEY_ID: ${BPP_UNIQUE_KEY_ID}
      BPP_ID: ${BPP_ID}
      BPP_CLIENT_ENDPOINT: ${BPP_CLIENT_ENDPOINT}
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      FLASK_SERVER: "False"
      BG_DEFAULT_URL: ${BG_DEFAULT_URL}


  rabbitmq:
    image: rabbitmq:3.10-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq


  strapi:
    build:
      context: seller-app
      dockerfile: strapiDocker
    environment:
      DATABASE_CLIENT: postgres
      DATABASE_NAME: strapi
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${STRAPI_DATABASE_USERNAME}
      DATABASE_PASSWORD: ${STRAPI_DATABASE_PASSWORD}
      DATABASE_SCHEMA: public
    volumes:
      - ./app:/srv/app
    ports:
      - '1337:1337'
    depends_on:
      - postgres

  seller:
    build:
      context: seller-app
      dockerfile: sellerApiDocker
    environment:
      FIREBASE_SERVICE_ACCOUNT_JSON_PATH: lib/config/firebase-service-account.json
      STRAPI_SERVER_URL: http://strapi:1337
      NODE_ENV: production
      STRAPI_API_TOKEN: ${STRAPI_API_TOKEN}
      BPP_PRIVATE_KEY: ${BPP_PRIVATE_KEY}
      BPP_PUBLIC_KEY: ${BPP_PUBLIC_KEY}
      BPP_UNIQUE_KEY_ID: ${BPP_UNIQUE_KEY_ID}
      BPP_ID: ${BPP_ID}
      BPP_URI: ${BPP_URI}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME_SELLER_CLIENT: ${CLIENT_PG_DATABASE}
      DATABASE_USERNAME: ${CLIENT_PG_USER}
      DATABASE_PASSWORD: ${CLIENT_PG_PASSWORD}
    volumes:
      - ./app:/srv/app
    ports:
      - '3002:3001'
    depends_on:
      - strapi
      - postgres

  postgres:
    image: postgres
    environment:
      POSTGRES_DB: strapi
      POSTGRES_USER: ${STRAPI_DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${STRAPI_DATABASE_PASSWORD}
    volumes:
      - ./postgres_init_scripts/:/docker-entrypoint-initdb.d/
      - ./data:/var/lib/postgresql/data

  nginx:
    build:
      context: bpp-nginx
      dockerfile: Dockerfile
    restart: "always"
    depends_on:
      - strapi
      - seller
      - bpp-protocol-webserver
    ports:
      - "80:80"
      - "443:443"
#    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot


  certbot:
    image: certbot/certbot
    restart: "always"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"